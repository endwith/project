package com.ptteng.quartz.job;

import com.ptteng.model.HistoryProduct;
import com.ptteng.model.Trade;
import com.ptteng.model.User;
import com.ptteng.service.HistoryProductService;
import com.ptteng.service.TradeService;
import com.ptteng.service.UserService;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class ReturnAccountAllJob implements Job {
    @Autowired
    private TradeService tradeService;
    @Autowired
    private RedisTemplate redisTemplate;
    @Autowired
    private UserService userService;
    @Autowired
    private HistoryProductService historyProductService;

    @Override
    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {
        if(trade.getExpireTime()>new Date().getTime()&&realMonth==expireMonth){
            //返息的最后一个月需要都算成本金

            redisTemplate.opsForValue().set("googleReturnAllAccount"+String.valueOf(trade.getId()),trade.getExpireTime());
        }
        if (accountSet.size() > 0) {
            for(Object key :accountSet){
                long nowTime = new Date().getTime();
                long expireTime = (long)redisTemplate.opsForValue().get((String)key);
                SimpleDateFormat sdf = new SimpleDateFormat("dd");
                int realDay = Integer.valueOf(sdf.format(nowTime));
                int expireDay = Integer.valueOf(sdf.format(expireTime));
                if (realDay == expireDay) {
                    String tradeId = (String) ((String) key).substring(((String) key).length()-1,((String) key).length());
                    Trade trade  = tradeService.selectByPrimaryKey(Long.valueOf(tradeId));
                        //计算月利息
                    BigDecimal bigDecimal = new BigDecimal(100 * 12);
                    BigDecimal interest = trade.getPurchaseAmount().multiply(trade.getExpectedRate()).divide(bigDecimal);
                        //用户的累计收入
                        //用户全部资产减少
                    User user = userService.selectByPrimaryKey(trade.getUserId());
                    user.setAccumulIncome(user.getAccumulIncome().add(interest));//
                    user.setTotalAssets(user.getTotalAssets().subtract(trade.getPurchaseAmount()));//
                    userService.updateByPrimaryKeySelective(user);
                        //历史记录表加入返息的记录
                    HistoryProduct historyProduct = new HistoryProduct();
                    historyProduct.setBuyer(user.getTrueName());
                    historyProduct.setArriveTime(trade.getExpireTime());
                    historyProduct.setBankCard("");
                    historyProduct.setPhone(user.getPhone());
                    historyProduct.setProduct(trade.getProduct());
                    historyProduct.setTransactionAction(1);
                    historyProduct.setTransactionAmouont(interest.add(trade.getPurchaseAmount()));//本息返还
                    historyProductService.insert(historyProduct);
                        //删除当前交易表
                    tradeService.deleteByPrimaryKey(trade.getId());
                    }
                }
            }
        }
    }


