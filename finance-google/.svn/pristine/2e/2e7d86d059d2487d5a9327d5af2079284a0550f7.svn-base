package com.ptteng.controller;

import com.alibaba.fastjson.JSONObject;

import com.ptteng.model.ModuleManage;
import com.ptteng.model.ModuleRole;
import com.ptteng.model.ModuleRoleManage;
import com.ptteng.model.RoleManage;
import com.ptteng.service.BackstageAccountService;
import com.ptteng.service.ModuleManageService;
import com.ptteng.service.RoleManageService;

import com.ptteng.util.Token;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.management.relation.Role;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import java.util.*;

@RefreshScope
@Controller
public class RoleController {
    org.slf4j.Logger logger = LoggerFactory.getLogger(RoleController.class);
    @Resource
    private RoleManageService roleManageService;
    @Autowired
    private BackstageAccountService backstageAccountService;
    @Autowired
    private ModuleManageService moduleManageService;
    @Autowired
    JSONObject jsonObject;
    /**
     *111角色管理查询角色
     */
    @RequestMapping(value ="/admin/a/u/all-role", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getAllRole(Long page,Long size){
        logger.info("/admin/a/u/all-role---GET---the request parameters are page:{},size:{}",page,size);
        List<RoleManage> roles;
        Long total;
        try{
            if(page!=null){
                roles=roleManageService.forSelect((page-1)*size, size);
            }else {
                roles=roleManageService.forSelect(0L,size);
            }
            total=roleManageService.selectCount();
        }catch (Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        Map<String,Object> map=new HashMap<>();
        map.put("total",total);
        map.put("products",roles);
        logger.info(roles.toString());
        jsonObject.put("code",1000);
        jsonObject.put("data",map);
        return jsonObject;

        }

    /**
     *112角色模糊查询
     */
    @RequestMapping(value ="/admin/a/u/roles", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getRoles(Long id,String role,String founder,
                               String modifier,Long page,Long size){
        logger.info("/admin/a/u/roles---GET---the request parameters a" +
                "re id:{},role:{},founder:{},modifier:{},page:{},size:{}",
                id,role,founder,modifier,page,size);
        List<RoleManage> roles;
        Long total;
        try{
            if(page!=null){
                roles=roleManageService.select((page-1)*size,size,id,role,founder,modifier);
            }else {
                roles=roleManageService.select(0L,size,id,role,founder,modifier);
            }
            total=roleManageService.selectCountWithCondition(id, role, founder, modifier);
        }catch (Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        Map<String,Object> map=new HashMap<>();
        map.put("total",total);
        map.put("products",roles);
        logger.info(roles.toString());
        jsonObject.put("code",1000);
        jsonObject.put("data",map);
        return jsonObject;
    }
    /**
     *113角色查找（编辑）
     */
    @RequestMapping(value ="/admin/a/u/role/{id}", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getRoleById(long id){
        logger.info("/admin/a/u/all-role---GET---the request parameters are id:{}",id);

        List<ModuleManage> moduleManages = roleManageService.selectById(id);
        jsonObject.put("data",moduleManages);
        logger.info(moduleManages.toString());
        jsonObject.put("code",1000);
        return jsonObject;
    }
    /**
     *114角色删除
     */
    @RequestMapping(value ="/admin/a/u/role/{id}", produces="application/json",method = RequestMethod.DELETE)
    @ResponseBody
    public JSONObject deleteRole(long id){
        logger.info("/admin/a/u/role/{id}---GET---the request parameters are id:{}",id);
        moduleManageService.deleteRole(roleManageService.selectByPrimaryKey(id).getRole());
        //删除关系表的有关该角色的所有信息
        roleManageService.deleteByPrimaryKey(id);//删除该角色

        jsonObject.put("code",1000);
        jsonObject.put("data","");
        return jsonObject;
    }
    /**
     *115角色更改（编辑好角色后点击保存）
     */
    @RequestMapping(value ="/admin/a/u/role", produces="application/json",method = RequestMethod.PUT)
    @ResponseBody
    public JSONObject updateRole(long roleId, String role, String moduleIdArray, HttpServletRequest request){
        logger.info("/admin/a/u/role/{id}---GET---the request parameters are roleId:{},role:{},moduleIdArray:{}"
                ,roleId,role,moduleIdArray);
        Cookie[] cookies = request.getCookies();
        String modifier = "";
        for(Cookie cookie : cookies){
            if(cookie.getName().equals("userId")){
                Token token = new Token();
                modifier = backstageAccountService.selectByPrimaryKey(Long.valueOf(token.SolveToken(cookie.getValue()))).getAdmin();
            }
        }
        RoleManage roleManage = new RoleManage();
        roleManage.setId(roleId);
        roleManage.setRole(role);
        roleManage.setModifier(modifier); //更新人
        roleManage.setUpdateAt(new Date().getTime());
        roleManageService.updateByPrimaryKeySelective(roleManage);//更新角色表
        RoleManage getRoleManage = roleManageService.selectByPrimaryKey(roleId);
        moduleManageService.deleteRole(getRoleManage.getRole());//把关系表之前角色删除
        String[] modules;
        ModuleRoleManage moduleRoleManage = new ModuleRoleManage();
        modules = moduleIdArray.split(",");
        for(Object module : modules){
            //这里得和前端交流，这里传进去是没有父模块id的
            ///
            ///
            moduleRoleManage.setModuleId(Long.valueOf((String) module));
            moduleRoleManage.setRole(role);
            moduleManageService.insert(moduleRoleManage);
        }
        jsonObject.put("code",1000);
        jsonObject.put("data","");
        return jsonObject;
    }
    /**
     *116角色增加
     */
    @RequestMapping(value ="/admin/a/u/role", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject addRole(){
        logger.info("/admin/a/u/role/{id}---GET---the request parameters are null ");
        List<ModuleRole> moduleManages = moduleManageService.selectAll();
        jsonObject.put("code",1000);
        logger.info(moduleManages.toString());
        jsonObject.put("data",moduleManages);
        return jsonObject;
    }
    /**
     *117角色保存（增加好角色后点击保存）
     */
    @RequestMapping(value ="/admin/a/u/role", produces="application/json",method = RequestMethod.POST)
    @ResponseBody
    public JSONObject addRole(String role, String moduleIdArray, HttpServletRequest request){
        logger.info("/admin/a/u/role/{id}---GET---the request parameters are roleId:{},moduleIdArray:{}"
                ,role,moduleIdArray);
        Cookie[] cookies = request.getCookies();
        String founder = "";
        for(Cookie cookie : cookies){
            if(cookie.getName().equals("userId")){
                Token token = new Token();
                founder = backstageAccountService.selectByPrimaryKey(Long.valueOf(token.SolveToken(cookie.getValue()))).getAdmin();
            }
        }
        RoleManage roleManage = new RoleManage();
        roleManage.setRole(role);
        roleManage.setModifier(founder); //增加人
        roleManage.setUpdateAt(new Date().getTime());
        roleManageService.insert(roleManage);//更新角色表
        String[] modules;
        ModuleRoleManage moduleRoleManage = new ModuleRoleManage();
        modules = moduleIdArray.split(",");
        for(Object module : modules){
            //这里得和前端交流，这里传进去是没有父模块id的
            ///
            ///
            moduleRoleManage.setModuleId(Long.valueOf((String) module));
            moduleRoleManage.setRole(role);
            moduleManageService.insert(moduleRoleManage);
        }
        jsonObject.put("code",1000);
        jsonObject.put("data","");
        return jsonObject;
    }
}
