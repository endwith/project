package com.ptteng.controller;

import com.alibaba.fastjson.JSONObject;
import com.ptteng.model.MessageRelationship;
import com.ptteng.model.Suggestion;
import com.ptteng.model.User;
import com.ptteng.service.InformationManageService;
import com.ptteng.service.MessageRelationshipService;
import com.ptteng.service.SuggestionService;
import com.ptteng.service.UserService;
import com.ptteng.util.ElTest;
import com.ptteng.util.FuiouUtil;
import com.ptteng.util.Md5Utils;
import com.ptteng.util.Token;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RefreshScope
@Controller
public class UserMessageController  {
    org.slf4j.Logger logger = LoggerFactory.getLogger(FinanceController.class);
    @Autowired
    private JSONObject jsonObject;
    @Resource
    private Token token;
    @Resource
    private ElTest elTest;
    @Resource
    UserService userService;
    @Resource
    private RedisTemplate redisTemplate;
    @Resource
    private InformationManageService informationManageService;
    @Resource
    private MessageRelationshipService messageRelationshipService;
    @Resource
    private SuggestionService suggestionService;
    /**
     *16显示个人信息
     */
    @RequestMapping(value ="/client/a/u/own-messages", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getMessages(HttpServletRequest request){
        logger.info("/client/a/u/own-messages---GET---the request parameters are");
        Map<String,Object> map=new HashMap<>();
        String thisId = null;
        Cookie[] cookie = request.getCookies();
        if (cookie != null) {
            for (Cookie c : cookie) {  // 遍历Cookie
                if("userId".equals(c.getName()))
                    thisId=c.getValue();
            }
        }
        User user=userService.selectByPrimaryKey(Long.valueOf(token.SolveToken(thisId)));
        int a;
        if(token.SolveToken(user.getTrueName()).equals("")){
             a=0;
        }else
        {
             a=1;
        }
        String phone=user.getPhone();
        map.put("phone",phone);
        map.put("isToVerifiedRealname",a);
        jsonObject.put("code",1000);
        jsonObject.put("data",map);
        return jsonObject;
    }
    /**
     *17实名验证(下一步)
     */
    @RequestMapping(value ="/client/a/u/real-name", produces="application/json",method = RequestMethod.POST)
    @ResponseBody
    public JSONObject realName(HttpServletRequest request,String realName,String idCard,String bankCard) throws Exception {
        logger.info("/client/a/u/real-name---POST---the request parameters are realName:{},idCard:{},bankCard:{}",realName,idCard,bankCard);
        String id = null;
        Cookie[] cookie = request.getCookies();
        if (cookie != null) {
            for (Cookie c : cookie) {  // 遍历Cookie
                if("userId".equals(c.getName()))
                    id=c.getValue();
            }
        }
        User user=userService.selectByPrimaryKey(Long.valueOf(token.SolveToken(id)));
        FuiouUtil fuiouUtil=new FuiouUtil();
        Map<String,String> map=new HashMap<>();
        String str=null;
             str=fuiouUtil.checkBankCard(realName,idCard,bankCard);
        if (str.contains("成功")) {
             jsonObject.put("code",1000);
             String reg = "[^\u4e00-\u9fa5]";
             str = str.replaceAll(reg, "");
             str = str.replaceAll("成功", "");
            }else {
                jsonObject.put("code",1001);
            }
        map.put("bank",str);
        map.put("bankCard",bankCard);
        map.put("phone",token.SolveToken(user.getPhone()));
        jsonObject.put("data",map);
        return jsonObject;
    }

    /**
     *20更换手机
     */
    @RequestMapping(value ="/client/a/u/sms-code", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject smsCode(HttpServletRequest request){
        Map<String,Object> map=new HashMap<>();
        String id = null;
        Cookie[] cookie = request.getCookies();
        if (cookie != null) {
            for (Cookie c : cookie) {  // 遍历Cookie
                if("userId".equals(c.getName()))
                    id=c.getValue();
            }
        }
        User user=userService.selectByPrimaryKey(Long.valueOf(token.SolveToken(id)));
        String phoneNumber=token.SolveToken(user.getPhone());
        jsonObject.put("code",1000);
        map.put("phoneNumber",phoneNumber);
        jsonObject.put("data",map);
        return jsonObject;
    }


    /**
     *23更换手机
     */
    @RequestMapping(value ="/client/a/u/new-phone-number", produces="application/json",method = RequestMethod.PUT)
    @ResponseBody
    public JSONObject newPhone(HttpServletRequest request,String phoneNumber,Long smsCode){
        logger.info("/client/a/u/new-phone-number---PUT---the request parameters are phoneNumber:{},smsCode:{}",phoneNumber,smsCode);
        Map<String,Object> map=new HashMap<>();
        String id = null;
        Cookie[] cookie = request.getCookies();
        if (cookie != null) {
            for (Cookie c : cookie) {  // 遍历Cookie
                if("userId".equals(c.getName()))
                    id=c.getValue();
            }
        }
        User user=userService.selectByPrimaryKey(Long.valueOf(token.SolveToken(id)));
        String phone=token.SolveToken(user.getPhone());
        if(redisTemplate.hasKey("googleSmsCode5"+phone)){
            String code=(String)redisTemplate.opsForValue().get("googleSmsCode5"+phone);
            if(smsCode != null &&smsCode.equals(code)){
                user.setPassword(token.makeToken(phoneNumber));
                userService.insertSelective(user);
                jsonObject.put("code",1000);
            }else{
                jsonObject.put("code",3004);
            }
        }else{
            jsonObject.put("code",3003);
        }
        jsonObject.put("code", 3004);
        jsonObject.put("data", "");
        return jsonObject;
    }
    /**
     *24修改密码
     */
    @RequestMapping(value ="/client/a/u/new-password", produces="application/json",method = RequestMethod.PUT)
    @ResponseBody
    public JSONObject newPassword(HttpServletRequest request,String lastPassword,String newPassword1,String newPassword2){
        logger.info("/client/a/u/new-password---PUT---the request parameters are lastPassword:{},newPassword1:{},newPassword2:{}",lastPassword,newPassword1,newPassword2);
        Map<String,Object> map=new HashMap<>();
        String id = null;
        Cookie[] cookie = request.getCookies();
        if (cookie != null) {
            for (Cookie c : cookie) {  // 遍历Cookie
                if("userId".equals(c.getName()))
                    id=c.getValue();
            }
        }
        if(newPassword1.equals(newPassword2)){
        User user=userService.selectByPrimaryKey(Long.valueOf(token.SolveToken(id)));
        String passwordWithSalt=Md5Utils.mixPasswordWithSalt(lastPassword,user.getSalt());
        if(user.getPassword().equals(passwordWithSalt)){
                user.setPassword(passwordWithSalt);
                userService.insertSelective(user);
                jsonObject.put("code", 1000);
            }else {
            jsonObject.put("code", 1007);
        }
        }else {
            jsonObject.put("code", 1002);
        }
        jsonObject.put("data", "");
        return jsonObject;
    }
    /**
     *26消息中心(应用消息)
     */
    @RequestMapping(value ="/client/a/u/information-center", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject informationCenter(HttpServletRequest request,Long size ,Long count){
        logger.info("/client/a/u/information-center---GET---the request parameters are size:{},count:{}",size,count);
        String id = null;
        Cookie[] cookie = request.getCookies();
        if (cookie != null) {
            for (Cookie c : cookie) {  // 遍历Cookie
                if("userId".equals(c.getName()))
                    id=c.getValue();
            }
        }
        Long userId=Long.valueOf(token.SolveToken(id));
        //先获取用户已读message的id，在去获取用户已读和未读取的
        List<Long> s =messageRelationshipService.selectByUserId(userId);
        List<Object> informations=informationManageService.selectInforByReadList(s,size*count);
        logger.info(""+informations);
        jsonObject.put("code",1000);
        jsonObject.put("data",informations);
        return jsonObject;
    }
    /**
     *27消息阅读(应用消息),点击阅读同时修改数据库MessageRelationship表，将未读状态改为已读
     */
    @RequestMapping(value ="/client/a/u/information", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject information(HttpServletRequest request,Long  id){
        logger.info("/client/a/u/information---GET---the request parameters are id:{}",id);
        String userId = null;
        Cookie[] cookie = request.getCookies();
        if (cookie != null) {
            for (Cookie c : cookie) {  // 遍历Cookie
                if("userId".equals(c.getName()))
                    userId=c.getValue();
            }
        }
        Long thisUserId=Long.valueOf(token.SolveToken(userId));
        List<Long> s =messageRelationshipService.selectByUserId(thisUserId);
        if(!s.contains(thisUserId)){
            MessageRelationship messageRelationship=new MessageRelationship();
            messageRelationship.setInforId(id);
            messageRelationship.setUserId(thisUserId);
            messageRelationshipService.insert(messageRelationship);
        }
        List<Object> informationContent=informationManageService.selectContent(id);
        jsonObject.put("code",1000);
        jsonObject.put("data",informationContent);
        return jsonObject;
    }


    /**
     *26消息中心(用户建议)
     */
    @RequestMapping(value ="/client/a/u/sugge-center", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject suggeCenter(HttpServletRequest request,Long size ,Long count){
        logger.info("/client/a/u/sugge-center---GET---the request parameters are size:{},count:{}",size,count);
        String id = null;
        Cookie[] cookie = request.getCookies();
        if (cookie != null) {
            for (Cookie c : cookie) {  // 遍历Cookie
                if("userId".equals(c.getName()))
                    id=c.getValue();
            }
        }
        Long userId=Long.valueOf(token.SolveToken(id));
        List<Object> sugges=suggestionService.selectSuggeByRead(userId,size*count);
        jsonObject.put("code",1000);
        jsonObject.put("data",sugges);
        return jsonObject;
    }
    /**
     *27消息阅读(用户建议)
     */
    @RequestMapping(value ="/client/a/u/sugge", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject sugge(Long  id){
        logger.info("/client/a/u/sugge---GET---the request parameters are id:{}",id);
        Suggestion suggestion=suggestionService.selectByPrimaryKey(id);
        if (suggestion.getStatus()==1){
            suggestion.setStatus(0);
            suggestionService.updateByPrimaryKeySelective(suggestion);
        }
        List<Object> sugge=suggestionService.selectSuggeContentById(id);
        jsonObject.put("code",1000);
        jsonObject.put("data",sugge);
        return jsonObject;
    }


}
