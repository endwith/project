package com.ptteng.controller;

import com.alibaba.fastjson.JSONObject;
import com.ptteng.model.*;
import com.ptteng.service.BackstageAccountService;
import com.ptteng.service.MatchService;
import com.ptteng.service.ObligatoryRightService;
import com.ptteng.service.TradeService;
import com.ptteng.util.CheckPhone;
import com.ptteng.util.Token;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RefreshScope
@Controller
public class ObligatoryRightController {
    org.slf4j.Logger logger = LoggerFactory.getLogger(ObligatoryRightController.class);
    @Autowired
    private JSONObject jsonObject;
    @Resource
    private TradeService tradeService;
    @Resource
    private ObligatoryRightService obligatoryRightService;
    @Resource
    private MatchService matchService;
    @Resource
    private Token token;
    @Resource
    BackstageAccountService backstageAccountService;
    /**
     *54债权管理模块
     */
    @RequestMapping(value ="/a/u/obligatory-right", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getAllOblRight(Long page,Long size){
        logger.info("/a/u/obligatory-right---GET---the request parameters are page:{},size:{}",page,size);
        List<ObligatoryRight> obligatoryRights;
        Long total;
        try{
        if(page!=null){
            obligatoryRights=obligatoryRightService.forSelect((page-1)*size, size);
        }else {
            obligatoryRights=obligatoryRightService.forSelect(0L,size);
        }
        total=obligatoryRightService.selectCount();
        }catch (Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }

     //   map.put("obligatoryRights",obligatoryRights);
        List investmentId = new ArrayList();
        List investmentAmount = new ArrayList();
        List financialPeriod  =new ArrayList();
        List<Map>  obligatoryRightList = new ArrayList<>();
        for(ObligatoryRight obligatoryRight :obligatoryRights) {
            List<Trade> tradeList = obligatoryRightService.getTrade(obligatoryRight.getId());
            for(Trade trade :tradeList) {
                investmentId.add(trade.getInvestmentContractId());
                investmentAmount.add(trade.getPurchaseAmount());
                financialPeriod.add(trade.getDelayTime());
            }
            Map obigatoryMap = new HashMap();
            obigatoryMap.put("investmentId",investmentId);
            obigatoryMap.put("investmentAmount",investmentAmount);
            obigatoryMap.put("financialPeriod",financialPeriod);

            //下面代码是可以将对象转成map
            // 获取f对象对应类中的所有属性域
            Field[] fields = obligatoryRight.getClass().getDeclaredFields();
            for (int i = 0, len = fields.length; i < len; i++) {
                String varName = fields[i].getName();
                varName = varName.toLowerCase();//将key置为小写，默认为对象的属性
                try {
                    // 获取原来的访问控制权限
                    boolean accessFlag = fields[i].isAccessible();
                    // 修改访问控制权限
                    fields[i].setAccessible(true);
                    // 获取在对象f中属性fields[i]对应的对象中的变量
                    Object o = fields[i].get(obligatoryRight);
                    if (o != null)
                        obigatoryMap.put(varName, o.toString());//转成map
                    // 恢复访问控制权限
                    fields[i].setAccessible(accessFlag);
                } catch (IllegalArgumentException ex) {
                    ex.printStackTrace();
                } catch (IllegalAccessException ex) {
                    ex.printStackTrace();
                }
            }
            obligatoryRightList.add(obigatoryMap);
        }
        logger.info(obligatoryRightList.toString());
        jsonObject.put("code",1000);
        jsonObject.put("data",obligatoryRightList);
        return jsonObject;
}
    /**
     *55模糊查询债权管理
     */
    @RequestMapping(value ="/a/u/obligatory-rights", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getOblRights(Long page,Long size,Long id,String company,String corporate,Integer status){
        logger.info("/a/u/obligatory-rights---GET---the request parameters are page:{},size:{},id:{},company:{},corporate:{},status:{}",page,size,id,company,corporate,status);
        List<ObligatoryRight> obligatoryRights;
        Long total;
        try{
        if(page!=null){
            obligatoryRights=obligatoryRightService.select((page-1)*size, size,id,company,corporate,status);
        }else {
            obligatoryRights=obligatoryRightService.select(0L,size,id,company,corporate,status);
        }
        total=obligatoryRightService.selectCount();
        } catch (Throwable e){
        logger.error("异常"+e);
        jsonObject.put("data","");
        jsonObject.put("code",2001);
        return jsonObject;
        }
        Map<String,Object> map=new HashMap<>();
        map.put("total",total);
        map.put("obligatoryRights",obligatoryRights);
//        logger.info(obligatoryRights.toString());
        jsonObject.put("code",1000);
        jsonObject.put("data",map);
        return jsonObject;
    }
    /**
     *56添加债权
     */
    @RequestMapping(value ="/a/u/obligatory-right", produces="application/json",method = RequestMethod.POST)
    @ResponseBody
    public JSONObject addOblRight(HttpServletRequest request,String company,String corporate,String mobile,String idCard,Long loanTime,BigDecimal loanSum,Long loanTerm,ObligatoryRight obligatoryRight){
        logger.info("/a/u/obligatory-right---POST---the request parameters are company:{},corporate:{},mobile:{},idCard:{},loanTime:{},loanSum:{},loanTerm", company,corporate,mobile,idCard,loanTime,loanSum,loanTerm);
        CheckPhone checkPhone=new CheckPhone();
        if(!checkPhone.isPhone(mobile)){
            jsonObject.put("code", 1002);
            jsonObject.put("data", "");
            return jsonObject;
        }
        String thisId = null;
        Cookie[] cookie = request.getCookies();
        if (cookie != null) {
            for (Cookie c : cookie) {  // 遍历Cookie
                if("userId".equals(c.getName()))
                    thisId=c.getValue();
            }
        }
        int s;
        try{
        Long userId=Long.valueOf(token.SolveToken(thisId));
        obligatoryRight.setCreateAt(System.currentTimeMillis());
        obligatoryRight.setFounder(backstageAccountService.selectByPrimaryKey(userId).getAdmin());
         s=obligatoryRightService.insert(obligatoryRight);
        }catch (Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        logger.info(""+s);
        if(s>0)
            jsonObject.put("code",1000);
        else
            jsonObject.put("code",1001);
        jsonObject.put("data","");
        return jsonObject;
    }
    /**
     *57编辑获取债权
     */
    @RequestMapping(value ="/a/u/obligatory-right/{id}", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getOblRight(Long id){
        logger.info("/a/u/obligatory-right/{id}---GET---the request parameters are id:{}",id);
        ObligatoryRight obligatoryRight;
        try{
         obligatoryRight=obligatoryRightService.selectByPrimaryKey(id);
        }catch (Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        logger.info(""+obligatoryRight.toString());
        jsonObject.put("code",1000);
        jsonObject.put("data",obligatoryRight);
        return jsonObject;
    }
    /**
     *58编辑-保存债权
     */
    @RequestMapping(value ="/a/u/obligatory-right", produces="application/json",method = RequestMethod.PUT)
    @ResponseBody
    public JSONObject updateOblRight(HttpServletRequest request,Long id,String company,String corporate,String mobile,String idCard,Long loanTime,BigDecimal loanSum,Long loanTerm,ObligatoryRight obligatoryRight){
        logger.info("/a/u/obligatory-right---PUT---the request parameters are id:{},company:{},corporate:{},mobile:{},idCard:{},loanTime:{},loanSum:{},loanTerm:{}",id,company,corporate,mobile,idCard,loanTime,loanSum,loanTerm);
        String thisId = null;
        Cookie[] cookie = request.getCookies();
        if (cookie != null) {
            for (Cookie c : cookie) {  // 遍历Cookie
                if("userId".equals(c.getName()))
                    thisId=c.getValue();
            }
        }
        int a;
        try{
            //更新人更新时间
            Long userId=Long.valueOf(token.SolveToken(thisId));
            obligatoryRight.setUpdateAt(System.currentTimeMillis());
            obligatoryRight.setModifier(backstageAccountService.selectByPrimaryKey(userId).getAdmin());
         a=obligatoryRightService.updateByPrimaryKeySelective(obligatoryRight);
        }catch (Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        if(a>0)
            jsonObject.put("code",1000);
        else
            jsonObject.put("code",1001);
        jsonObject.put("data","");
        return jsonObject;

    }
    /**
     *59删除债权
     */
    @RequestMapping(value ="/a/u/obligatory-right/{id}", produces="application/json",method = RequestMethod.DELETE)
    @ResponseBody
    public JSONObject deleteOblRight(Long id){
        logger.info("/a/u/obligatory-right/{id}---GET---the request parameters are id:{}",id);
        int a;
        try{
            a=obligatoryRightService.deleteByPrimaryKey(id);
        }catch (Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        if(a>0)
            jsonObject.put("code", 1000);
        else
            jsonObject.put("code", 1001);
        jsonObject.put("data", "");
        return jsonObject;
    }
    /**
     *60债权配置管理
     */
    @RequestMapping(value ="/a/u/unmatched-obligatory-right", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getUnmatchedOblRight(Long id){
        logger.info("/a/u/unmatched-obligatory-right---GET---the request parameters are id:{}",id);
        Map<String,Object> map=new HashMap<>();
        try{
            ObligatoryRight obligatoryRight=obligatoryRightService.selectByPrimaryKey(id);
            Long loanTerm=obligatoryRight.getLoanTerm();
            BigDecimal matchingAmount=obligatoryRight.getMatchingAmount();
            Long repayTime=obligatoryRight.getRepayTime();
            List<Object> trade=tradeService.limitMatchSelect(id,loanTerm,repayTime,matchingAmount);
            logger.info("**"+trade+"**"+obligatoryRight);
            map.put("obl",obligatoryRight);
            map.put("trade",trade);
        }catch (Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        jsonObject.put("code",1000);
        jsonObject.put("data",map);
        return jsonObject;
    }
    /**
     *61债权配置管理-所有投资
     */
    @RequestMapping(value ="/a/u/matched-contract", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getMatchedContract(Long page,Long size,Long id){
        logger.info("/a/u/unmatched-obligatory-right---GET---the request parameters are id:{},page:{},size:{}",id,page,size);
        List<Object> trade;
        try{
            trade=tradeService.matchSelect(id,size,page);
        }catch (Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        logger.info(""+trade);
        jsonObject.put("code",1000);
        jsonObject.put("data",trade);
        return jsonObject;
    }
    /**
     *62债权配置管理-匹配
     */
    @RequestMapping(value ="/a/u/matching-obligatory-right", produces="application/json",method = RequestMethod.PUT)
    @ResponseBody
    public JSONObject matchingOblRight(BigDecimal matchingAmount,Long obligatoryId,HttpServletRequest request){
        String JSON=request.getParameter("JSON");
        logger.info("/a/u/matching-obligatory-right---PUT---the request parameters are matchingAmount:{},obligatoryId:{},JSON:{}",matchingAmount,obligatoryId,JSON);
//        BigDecimal newMatchingAmount=matchingAmount-toBeMatched;
//        obligatoryRightService.updateById(obligatoryId,newMatchingAmount);
//        for() {
//            tradeService.updateByTradeId(toBeMatched, tradeId);
//            Match match = new Match(oblId, tradeId);
//            matchService.insert(match);
//        }
        jsonObject.put("code",1000);
        jsonObject.put("data","");
        return jsonObject;
    }

}
