package com.ptteng.controller;

import com.alibaba.fastjson.JSONObject;
import com.ptteng.model.BackstageAccount;
import com.ptteng.model.RoleManage;
import com.ptteng.service.BackstageAccountService;
import com.ptteng.service.RoleManageService;
import com.ptteng.util.Md5Utils;
import com.ptteng.util.Token;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;


import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RefreshScope
@Controller
public class   BackstageAccountController {
    org.slf4j.Logger logger = LoggerFactory.getLogger(BackstageAccountController.class);
    @Autowired
    private JSONObject jsonObject;
    @Autowired
    private BackstageAccountService backstageAccountService;
    @Autowired
    private RoleManageService roleManageService;
    @Autowired
    private Token token;
    /**
     *99账号管理入口
     */
    @RequestMapping(value ="/a/u/all-backstage-account", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getAllBackstageAccount(Long page,Long size){
        logger.info("/a/u/all-backstage-account---GET---the request parameters are page:{},size:{}",page,size);
        List<BackstageAccount> backstageAccounts;
        Long total;
        try{
            if(page!=null){
                backstageAccounts =backstageAccountService.forSelect((page-1)*size, size);
            }else {
                backstageAccounts =backstageAccountService.forSelect(0L,size);
            }
            total=backstageAccountService.selectCount();
        }catch (Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        Map<String,Object> map=new HashMap<>();
        map.put("total",total);
        map.put("backstageAccounts",backstageAccounts);
//        logger.info(backstageAccounts.toString());
        jsonObject.put("code",1000);
        jsonObject.put("data",map);
        return jsonObject;
}
    /**
     *100账号管理查询
     */
    @RequestMapping(value ="/a/u/backstage-account", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getBackstageAccounts(Long page,Long size,Long id,String adminRole,String admin,String founder){
        logger.info("/a/u/backstage-account---GET---the request parameters a" +
                        "re id:{},adminRole:{}, admin:{},founder:{},page:{},size:{}",
                id,adminRole,admin,founder,page,size);
        List<BackstageAccount>  backstageAccounts;
        Map<String,Object> map=new HashMap<>();
        Long total;
        try{
            if(page!=null){
                backstageAccounts=backstageAccountService.select((page-1)*size,size,id,adminRole,admin,founder);
            }else {
                backstageAccounts=backstageAccountService.select(0L,size,id,adminRole,admin,founder);
            }
            total=backstageAccountService.selectCountWithCondition(id,adminRole,admin,founder);
        }catch(Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
//        logger.info(backstageAccounts.toString());
        map.put("backstageAccounts",backstageAccounts);
        map.put("total",total);
        jsonObject.put("code",1000);
        jsonObject.put("data",map);
        return jsonObject;
    }
    /**
     *101账号管理新增-获取角色
     */
    @RequestMapping(value ="/a/u/backstage-account/role", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getAllRole(HttpServletRequest request){
        logger.info("/a/u/backstage-account/role---GET---the request parameters are null");
        Cookie[] cookies = request.getCookies();
        List<RoleManage> roleManages;
        try{
        for(Cookie cookie: cookies){
            if(cookie.getName().equals("userId")){
                //判断角色是否有资格修改与新增
                String backRole = backstageAccountService.selectByPrimaryKey(Long.valueOf(token.SolveToken(cookie.getValue()))).getAdmin();
                if(!(backRole.equals("管理员")|backRole.equals("超级管理员"))){
                    jsonObject.put("code",9010);
                    jsonObject.put("data","");
                    return jsonObject;
                }
            }
        }
         roleManages = roleManageService.selectAll();
        }catch(Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        List rolesList = new ArrayList();
        for(RoleManage roleManage : roleManages){
            rolesList.add(roleManage.getRole());
        }
        logger.info(rolesList.toString());
        jsonObject.put("code",1000);
        jsonObject.put("data",rolesList);
        return jsonObject;
    }
    /**
     *102账号管理新增-保存
     */
    @RequestMapping(value ="/a/u/backstage-account", produces="application/json",method = RequestMethod.POST)
    @ResponseBody
    public JSONObject addBackstageAccount(String admin,String password,String adminRole,int status,
    HttpServletRequest request){
        logger.info("/a/u/backstage-account---GET---the request parameters are admin:" +
                        "{},password:{},adminRole:{},status:{}"
                ,admin,password,adminRole,status);
        if(admin.equals("超级管理员")){
            jsonObject.put("code",9010);
            jsonObject.put("data","");
            return jsonObject;
        }
        String founder =  "";
        try{
        Cookie[] cookies = request.getCookies();
        for(Cookie cookie : cookies){
            if (cookie.getName().equals("userId")){
                Token token = new Token();
                long id = Long.valueOf(token.SolveToken(cookie.getValue()));
                founder = backstageAccountService.selectByPrimaryKey(id).getAdmin();
            }

        }
        Md5Utils md5Utils=new Md5Utils();
        BackstageAccount backstageAccount = new BackstageAccount();
        backstageAccount.setAdmin(admin);
        backstageAccount.setFounder(founder);
        backstageAccount.setCreateAt(System.currentTimeMillis());
        backstageAccount.setAdminRole(adminRole);
        String passwordWithMd5=md5Utils.MD5(password);
        backstageAccount.setPassword(passwordWithMd5);
        backstageAccount.setStatus(status);
        backstageAccount.setModifier("");
        backstageAccountService.insert(backstageAccount);
        }catch (Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        jsonObject.put("code",1000);
        jsonObject.put("data","");
        return jsonObject;
    }
    /**
     *103账号管理编辑—获取
     */
    @RequestMapping(value ="/a/u/backstage-account/{id}", produces="application/json",method = RequestMethod.GET)
    @ResponseBody
    public JSONObject getBackstageAccount(Long id,HttpServletRequest request){
        logger.info("/a/u/backstage-account/{id}---GET---the request parameters are id:" +
                        "{}",id);
        Cookie[] cookies = request.getCookies();
        String ownAdmin = "";
        BackstageAccount backstageAccount;
        try{
        for(Cookie cookie : cookies){
            if ("userId".equals(cookie.getName())){
                Token token = new Token();
                long ownId = Long.valueOf(token.SolveToken(cookie.getValue()));
                ownAdmin = backstageAccountService.selectByPrimaryKey(ownId).getAdmin();
            }
        }
         backstageAccount = backstageAccountService.selectByPrimaryKey(id);
        }catch(Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        if(backstageAccount.getAdmin().equals(ownAdmin)||(!backstageAccount.getAdmin().contains("管理员"))){
            jsonObject.put("code",9010);
            jsonObject.put("data","");
            return jsonObject;
        }
        jsonObject.put("code",1000);
        logger.info(backstageAccount.toString());
        jsonObject.put("data",backstageAccount);
        return jsonObject;
    }
    /**
     *104账号编辑-保存
     */
    @RequestMapping(value ="/a/u/backstage-account/{id}", produces="application/json",method = RequestMethod.PUT)
    @ResponseBody
    public JSONObject updateBackstageAccount(HttpServletRequest request,Long id,String admin,String password,int status,String adminRole){
        logger.info("/a/u/backstage-account/{id}---GET---the request parameters are id ：{}，admin:" +
                        "{},password:{},adminRole:{},status:{}"+
               id ,admin,password,adminRole,status);
        String modifier=null;
        try{
        Cookie[] cookies = request.getCookies();
        for(Cookie cookie : cookies){
            if (cookie.getName().equals("userId")){
                Token token = new Token();
                long userId = Long.valueOf(token.SolveToken(cookie.getValue()));
                 modifier = backstageAccountService.selectByPrimaryKey(userId).getAdmin();
            }
        }
        Md5Utils md5Utils=new Md5Utils();
        BackstageAccount backstageAccount = new BackstageAccount();
        backstageAccount.setId(id);
        backstageAccount.setAdmin(admin);
        backstageAccount.setAdminRole(adminRole);
        backstageAccount.setPassword(md5Utils.MD5(password));
        backstageAccount.setStatus(status);
        backstageAccount.setModifier(modifier);
        backstageAccount.setUpdateAt(System.currentTimeMillis());

        backstageAccountService.updateByPrimaryKeySelective(backstageAccount);
        }catch(Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        jsonObject.put("code",1000);
        jsonObject.put("data","");
        return jsonObject;
    }
    /**
     *105账号管理删除
     */
    @RequestMapping(value ="/a/u/backstage-account/{id}", produces="application/json",method = RequestMethod.DELETE)
    @ResponseBody
    public JSONObject deleteBackstageAccount(Long id,HttpServletRequest request){
        logger.info("/a/u/backstage-account/{id}---GET---the request parameters are id:{}"+id);
        Cookie[] cookies = request.getCookies();
        String ownAdmin = "";
        try{
        for(Cookie cookie : cookies){
            if ("userId".equals(cookie.getName())){
                Token token = new Token();
                long ownId = Long.valueOf(token.SolveToken(cookie.getValue()));
                ownAdmin = backstageAccountService.selectByPrimaryKey(ownId).getAdmin();
            }
        }
        BackstageAccount backstageAccount = backstageAccountService.selectByPrimaryKey(id);
        if(backstageAccount.getAdmin().equals(ownAdmin)||(!backstageAccount.getAdmin().contains("管理员"))){
            jsonObject.put("code",9010);
            jsonObject.put("data","");
            return jsonObject;
        }
        backstageAccountService.deleteByPrimaryKey(id);
        }catch(Throwable e){
            logger.error("异常"+e);
            jsonObject.put("data","");
            jsonObject.put("code",2001);
            return jsonObject;
        }
        jsonObject.put("code",1000);
        jsonObject.put("data","");
        return jsonObject;
    }
}
